
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00001214  000012a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ce  008000b2  008000b2  000012fa  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d5  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001335  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000686  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010df  00000000  00000000  00002fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  000040cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000acb  00000000  00000000  000047eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000054 <__c.1936>:
      54:	70 6f 6f 6c 6c 6f 6f 70 00                          poolloop.

0000005d <__c.1934>:
      5d:	70 72 61 74 79 75 73 68 00                          pratyush.

00000066 <__c.1441>:
      66:	0d 0a 0d 0a 00                                      .....

0000006b <__c.1439>:
      6b:	48 6f 73 74 3a 20 00                                Host: .

00000072 <__c.1437>:
      72:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f 73     Connection: clos
      82:	65 0d 0a 00                                         e...

00000086 <__c.1435>:
      86:	55 73 65 72 2d 41 67 65 6e 74 3a 20 44 4c 41 42     User-Agent: DLAB
      96:	5a 0d 0a 00                                         Z...

0000009a <__c.1433>:
      9a:	20 48 54 54 50 2f 31 2e 30 0d 0a 00                  HTTP/1.0...

000000a6 <__c.1431>:
      a6:	47 45 54 20 2f 00                                   GET /.

000000ac <__c.1426>:
      ac:	0d 0a 00                                            ...

000000af <__c.1423>:
      af:	41 54 2b 43 49 50 53 45 4e 44 3d 30 2c 00           AT+CIPSEND=0,.

000000bd <__c.1417>:
      bd:	22 2c 38 30 0d 0a 00                                ",80...

000000c4 <__c.1414>:
      c4:	41 54 2b 43 49 50 53 54 41 52 54 3d 30 2c 22 54     AT+CIPSTART=0,"T
      d4:	43 50 22 2c 22 00                                   CP",".

000000da <__c.1398>:
      da:	22 0d 0a 00                                         "...

000000de <__c.1396>:
      de:	22 2c 22 00                                         ",".

000000e2 <__c.1394>:
      e2:	41 54 2b 43 57 4a 41 50 3d 22 00                    AT+CWJAP=".

000000ed <__c.1392>:
      ed:	41 54 2b 43 57 4d 4f 44 45 3d 31 0d 0a 00           AT+CWMODE=1...

000000fb <__c.1390>:
      fb:	41 54 2b 43 49 50 4d 55 58 3d 31 0d 0a 00           AT+CIPMUX=1...

00000109 <__c.1379>:
     109:	41 54 45 30 0d 0a 00                                ATE0...

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf e5       	ldi	r28, 0x5F	; 95
     116:	d8 e0       	ldi	r29, 0x08	; 8
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	10 e0       	ldi	r17, 0x00	; 0
     11e:	a0 e6       	ldi	r26, 0x60	; 96
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e4 e1       	ldi	r30, 0x14	; 20
     124:	f2 e1       	ldi	r31, 0x12	; 18
     126:	02 c0       	rjmp	.+4      	; 0x12c <.do_copy_data_start>

00000128 <.do_copy_data_loop>:
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0

0000012c <.do_copy_data_start>:
     12c:	a2 3b       	cpi	r26, 0xB2	; 178
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <.do_copy_data_loop>

00000132 <__do_clear_bss>:
     132:	12 e0       	ldi	r17, 0x02	; 2
     134:	a2 eb       	ldi	r26, 0xB2	; 178
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a0 38       	cpi	r26, 0x80	; 128
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
     146:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     14e:	9c 01       	movw	r18, r24
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	ca 01       	movw	r24, r20
     156:	b9 01       	movw	r22, r18
     158:	60 58       	subi	r22, 0x80	; 128
     15a:	7b 47       	sbci	r23, 0x7B	; 123
     15c:	81 4e       	sbci	r24, 0xE1	; 225
     15e:	9f 4f       	sbci	r25, 0xFF	; 255
     160:	f3 e0       	ldi	r31, 0x03	; 3
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	88 1f       	adc	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	fa 95       	dec	r31
     16c:	d1 f7       	brne	.-12     	; 0x162 <serial_init+0x14>
     16e:	e4 e0       	ldi	r30, 0x04	; 4
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	ea 95       	dec	r30
     17a:	d1 f7       	brne	.-12     	; 0x170 <serial_init+0x22>
     17c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
	
	
	
	UQFront=UQEnd=-1;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 b3 00 	sts	0x00B3, r24
     18a:	80 91 b3 00 	lds	r24, 0x00B3
     18e:	80 93 b2 00 	sts	0x00B2, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
     192:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
     194:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     196:	86 e8       	ldi	r24, 0x86	; 134
     198:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     19a:	88 e9       	ldi	r24, 0x98	; 152
     19c:	8a b9       	out	0x0a, r24	; 10
	sei();
     19e:	78 94       	sei

}
     1a0:	08 95       	ret

000001a2 <serial_finit>:

void serial_finit(uint16_t baudrate,uint8_t xtal)
{
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	26 2f       	mov	r18, r22
uint16_t ubrrvalue = (((xtal*1000000)+(baudrate*8L))/(baudrate*16L)-1);
     1ac:	7c 01       	movw	r14, r24
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	ca 01       	movw	r24, r20
     1ba:	b9 01       	movw	r22, r18
     1bc:	28 e4       	ldi	r18, 0x48	; 72
     1be:	38 ee       	ldi	r19, 0xE8	; 232
     1c0:	41 e0       	ldi	r20, 0x01	; 1
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	0e 94 ba 07 	call	0xf74	; 0xf74 <__mulsi3>
     1c8:	6e 0d       	add	r22, r14
     1ca:	7f 1d       	adc	r23, r15
     1cc:	80 1f       	adc	r24, r16
     1ce:	91 1f       	adc	r25, r17
     1d0:	b3 e0       	ldi	r27, 0x03	; 3
     1d2:	66 0f       	add	r22, r22
     1d4:	77 1f       	adc	r23, r23
     1d6:	88 1f       	adc	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	ba 95       	dec	r27
     1dc:	d1 f7       	brne	.-12     	; 0x1d2 <serial_finit+0x30>
     1de:	a4 e0       	ldi	r26, 0x04	; 4
     1e0:	ee 0c       	add	r14, r14
     1e2:	ff 1c       	adc	r15, r15
     1e4:	00 1f       	adc	r16, r16
     1e6:	11 1f       	adc	r17, r17
     1e8:	aa 95       	dec	r26
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <serial_finit+0x3e>
     1ec:	a8 01       	movw	r20, r16
     1ee:	97 01       	movw	r18, r14
     1f0:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divmodsi4>
     1f4:	21 50       	subi	r18, 0x01	; 1
     1f6:	30 40       	sbci	r19, 0x00	; 0
	
	UQFront=UQEnd=-1;
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	80 93 b3 00 	sts	0x00B3, r24
     1fe:	80 91 b3 00 	lds	r24, 0x00B3
     202:	80 93 b2 00 	sts	0x00B2, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
     206:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
     208:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     20a:	86 e8       	ldi	r24, 0x86	; 134
     20c:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     20e:	88 e9       	ldi	r24, 0x98	; 152
     210:	8a b9       	out	0x0a, r24	; 10
	sei();
     212:	78 94       	sei

}
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <serial_read>:
unsigned char serial_read()
{
	char data;
	
	
	if(UQFront==-1)
     21e:	80 91 b2 00 	lds	r24, 0x00B2
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	11 f4       	brne	.+4      	; 0x22a <serial_read+0xc>
     226:	e0 e0       	ldi	r30, 0x00	; 0
     228:	1d c0       	rjmp	.+58     	; 0x264 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
     22a:	e0 91 b2 00 	lds	r30, 0x00B2
     22e:	ff 27       	eor	r31, r31
     230:	e7 fd       	sbrc	r30, 7
     232:	f0 95       	com	r31
     234:	ec 54       	subi	r30, 0x4C	; 76
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
     23a:	90 91 b2 00 	lds	r25, 0x00B2
     23e:	80 91 b3 00 	lds	r24, 0x00B3
     242:	98 17       	cp	r25, r24
     244:	41 f4       	brne	.+16     	; 0x256 <serial_read+0x38>
	{
	
	UQFront=UQEnd=-1;
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	80 93 b3 00 	sts	0x00B3, r24
     24c:	80 91 b3 00 	lds	r24, 0x00B3
     250:	80 93 b2 00 	sts	0x00B2, r24
     254:	07 c0       	rjmp	.+14     	; 0x264 <serial_read+0x46>
	}
	else
	{
		UQFront++;
     256:	80 91 b2 00 	lds	r24, 0x00B2
     25a:	8f 5f       	subi	r24, 0xFF	; 255
     25c:	80 93 b2 00 	sts	0x00B2, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     260:	80 91 b2 00 	lds	r24, 0x00B2
		UQFront=0;
	}

	return data;
}
     264:	8e 2f       	mov	r24, r30
     266:	08 95       	ret

00000268 <serial_char>:

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     268:	5d 9b       	sbis	0x0b, 5	; 11
     26a:	fe cf       	rjmp	.-4      	; 0x268 <serial_char>

	
	UDR=data;
     26c:	8c b9       	out	0x0c, r24	; 12
}
     26e:	08 95       	ret

00000270 <serial_string>:
}



void serial_string(char *str)
{
     270:	fc 01       	movw	r30, r24
     272:	04 c0       	rjmp	.+8      	; 0x27c <serial_string+0xc>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     274:	5d 9b       	sbis	0x0b, 5	; 11
     276:	fe cf       	rjmp	.-4      	; 0x274 <serial_string+0x4>

	
	UDR=data;
     278:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
     27a:	31 96       	adiw	r30, 0x01	; 1



void serial_string(char *str)
{
	while((*str)!='\0')
     27c:	80 81       	ld	r24, Z
     27e:	88 23       	and	r24, r24
     280:	c9 f7       	brne	.-14     	; 0x274 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
     282:	08 95       	ret

00000284 <serial_string_P>:


void serial_string_P(const char *progmem_s)
{
     284:	03 c0       	rjmp	.+6      	; 0x28c <serial_string_P+0x8>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     286:	5d 9b       	sbis	0x0b, 5	; 11
     288:	fe cf       	rjmp	.-4      	; 0x286 <serial_string_P+0x2>

	
	UDR=data;
     28a:	2c b9       	out	0x0c, r18	; 12
     28c:	fc 01       	movw	r30, r24

register char c;

	
	
	while ( (c = pgm_read_byte(progmem_s++))!='\0' ) {
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	24 91       	lpm	r18, Z+
     292:	22 23       	and	r18, r18
     294:	c1 f7       	brne	.-16     	; 0x286 <serial_string_P+0x2>
       serial_char(c);
		//progmem_s++;
    }
	
}
     296:	08 95       	ret

00000298 <s_readbuffer>:


void s_readbuffer(void *buff,uint16_t len)
{
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	7c 01       	movw	r14, r24
     2a6:	8b 01       	movw	r16, r22
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	07 c0       	rjmp	.+14     	; 0x2bc <s_readbuffer+0x24>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
     2ae:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	ec 0f       	add	r30, r28
     2b6:	fd 1f       	adc	r31, r29
     2b8:	80 83       	st	Z, r24


void s_readbuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     2ba:	21 96       	adiw	r28, 0x01	; 1
     2bc:	c0 17       	cp	r28, r16
     2be:	d1 07       	cpc	r29, r17
     2c0:	b0 f3       	brcs	.-20     	; 0x2ae <s_readbuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <serial_available>:

uint8_t serial_available()
{
	if(UQFront==-1) return 0;
     2d0:	80 91 b2 00 	lds	r24, 0x00B2
     2d4:	8f 3f       	cpi	r24, 0xFF	; 255
     2d6:	11 f4       	brne	.+4      	; 0x2dc <serial_available+0xc>
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	1a c0       	rjmp	.+52     	; 0x310 <serial_available+0x40>
	if(UQFront<UQEnd)
     2dc:	90 91 b2 00 	lds	r25, 0x00B2
     2e0:	80 91 b3 00 	lds	r24, 0x00B3
     2e4:	98 17       	cp	r25, r24
     2e6:	34 f4       	brge	.+12     	; 0x2f4 <serial_available+0x24>
		return(UQEnd-UQFront+1);
     2e8:	90 91 b3 00 	lds	r25, 0x00B3
     2ec:	80 91 b2 00 	lds	r24, 0x00B2
     2f0:	9f 5f       	subi	r25, 0xFF	; 255
     2f2:	0d c0       	rjmp	.+26     	; 0x30e <serial_available+0x3e>
	else if(UQFront>UQEnd)
     2f4:	90 91 b2 00 	lds	r25, 0x00B2
     2f8:	80 91 b3 00 	lds	r24, 0x00B3
     2fc:	89 17       	cp	r24, r25
     2fe:	14 f0       	brlt	.+4      	; 0x304 <serial_available+0x34>
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	06 c0       	rjmp	.+12     	; 0x310 <serial_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     304:	90 91 b3 00 	lds	r25, 0x00B3
     308:	80 91 b2 00 	lds	r24, 0x00B2
     30c:	93 5d       	subi	r25, 0xD3	; 211
     30e:	98 1b       	sub	r25, r24
	else
		return 1;
}
     310:	89 2f       	mov	r24, r25
     312:	08 95       	ret

00000314 <s_clearbuffer>:




void s_clearbuffer()
{
     314:	02 c0       	rjmp	.+4      	; 0x31a <s_clearbuffer+0x6>
	while(serial_available()>0)
	{
		serial_read();
     316:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>



void s_clearbuffer()
{
	while(serial_available()>0)
     31a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <serial_available>
     31e:	88 23       	and	r24, r24
     320:	d1 f7       	brne	.-12     	; 0x316 <s_clearbuffer+0x2>
	{
		serial_read();
	}
}
     322:	08 95       	ret

00000324 <serial_nreadw>:




char serial_nreadw(char *msg,unsigned char length)
{
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24
     32c:	16 2f       	mov	r17, r22

   while(serial_available()<length);		
     32e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <serial_available>
     332:	81 17       	cp	r24, r17
     334:	e0 f3       	brcs	.-8      	; 0x32e <serial_nreadw+0xa>
	s_readbuffer(msg,length);
     336:	ce 01       	movw	r24, r28
     338:	61 2f       	mov	r22, r17
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	0e 94 4c 01 	call	0x298	; 0x298 <s_readbuffer>
	return 1;
	
}
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	08 95       	ret

0000034a <serial_nread>:


char serial_nread(char *msg,unsigned char length)
{
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
     352:	16 2f       	mov	r17, r22

  if(serial_available()>=length)
     354:	0e 94 68 01 	call	0x2d0	; 0x2d0 <serial_available>
     358:	81 17       	cp	r24, r17
     35a:	38 f0       	brcs	.+14     	; 0x36a <serial_nread+0x20>
{	
	s_readbuffer(msg,length);
     35c:	ce 01       	movw	r24, r28
     35e:	61 2f       	mov	r22, r17
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	0e 94 4c 01 	call	0x298	; 0x298 <s_readbuffer>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	02 c0       	rjmp	.+4      	; 0x36e <serial_nread+0x24>
	return 1;
	
}
else{
       msg[0]='\0';
     36a:	18 82       	st	Y, r1
     36c:	80 e0       	ldi	r24, 0x00	; 0
	  return 0;
}


	
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	08 95       	ret

00000376 <__vector_13>:




ISR(USART_RXC_VECT)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	8f 93       	push	r24
     388:	9f 93       	push	r25
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
	
	char data=UDR;
     38e:	4c b1       	in	r20, 0x0c	; 12

	

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     390:	80 91 b3 00 	lds	r24, 0x00B3
     394:	80 91 b3 00 	lds	r24, 0x00B3
     398:	20 91 b2 00 	lds	r18, 0x00B2
     39c:	99 27       	eor	r25, r25
     39e:	87 fd       	sbrc	r24, 7
     3a0:	90 95       	com	r25
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	33 27       	eor	r19, r19
     3a6:	27 fd       	sbrc	r18, 7
     3a8:	30 95       	com	r19
     3aa:	82 17       	cp	r24, r18
     3ac:	93 07       	cpc	r25, r19
     3ae:	39 f4       	brne	.+14     	; 0x3be <__vector_13+0x48>
	{
		
		UQFront++;
     3b0:	80 91 b2 00 	lds	r24, 0x00B2
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
     3b6:	80 93 b2 00 	sts	0x00B2, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     3ba:	80 91 b2 00 	lds	r24, 0x00B2
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     3be:	80 91 b3 00 	lds	r24, 0x00B3
		UQEnd=0;
	else
		UQEnd++;
     3c2:	80 91 b3 00 	lds	r24, 0x00B3
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 b3 00 	sts	0x00B3, r24


	URBuff[UQEnd]=data;
     3cc:	e0 91 b3 00 	lds	r30, 0x00B3
     3d0:	ff 27       	eor	r31, r31
     3d2:	e7 fd       	sbrc	r30, 7
     3d4:	f0 95       	com	r31
     3d6:	ec 54       	subi	r30, 0x4C	; 76
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     3dc:	80 91 b2 00 	lds	r24, 0x00B2
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <__vector_13+0x72>
     3e4:	10 92 b2 00 	sts	0x00B2, r1

}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	0f 90       	pop	r0
     3fc:	1f 90       	pop	r1
     3fe:	18 95       	reti

00000400 <urclear>:



void urclear()
{
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
   for(int i=0;i<128;i++)
   {
      URBuff[i]='\0';
     404:	fc 01       	movw	r30, r24
     406:	ec 54       	subi	r30, 0x4C	; 76
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	10 82       	st	Z, r1



void urclear()
{
   for(int i=0;i<128;i++)
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	80 38       	cpi	r24, 0x80	; 128
     410:	91 05       	cpc	r25, r1
     412:	c1 f7       	brne	.-16     	; 0x404 <urclear+0x4>
   {
      URBuff[i]='\0';
   } 

}
     414:	08 95       	ret

00000416 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs)
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     416:	66 23       	and	r22, r22
     418:	11 f0       	breq	.+4      	; 0x41e <lcd_write+0x8>
       lcd_rs_high();
     41a:	dc 9a       	sbi	0x1b, 4	; 27
     41c:	01 c0       	rjmp	.+2      	; 0x420 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     41e:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
     420:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     422:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     424:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     426:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     428:	a7 9a       	sbi	0x14, 7	; 20

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     42a:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     42c:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     42e:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     430:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     432:	87 fd       	sbrc	r24, 7
     434:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     436:	86 fd       	sbrc	r24, 6
     438:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     43a:	85 fd       	sbrc	r24, 5
     43c:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     43e:	84 fd       	sbrc	r24, 4
     440:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     442:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     444:	00 c0       	rjmp	.+0      	; 0x446 <lcd_write+0x30>
    lcd_e_low();
     446:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     448:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     44a:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     44c:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     44e:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     450:	83 fd       	sbrc	r24, 3
     452:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     454:	82 fd       	sbrc	r24, 2
     456:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     458:	81 fd       	sbrc	r24, 1
     45a:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     45c:	80 fd       	sbrc	r24, 0
     45e:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     460:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     462:	00 c0       	rjmp	.+0      	; 0x464 <lcd_write+0x4e>
    lcd_e_low();
     464:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     466:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     468:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     46a:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     46c:	af 9a       	sbi	0x15, 7	; 21
    }
}
     46e:	08 95       	ret

00000470 <lcd_waitbusy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	97 e2       	ldi	r25, 0x27	; 39
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <lcd_waitbusy+0x4>


    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     478:	84 e0       	ldi	r24, 0x04	; 4
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <lcd_waitbusy+0xc>
     480:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
     482:	dd 9a       	sbi	0x1b, 5	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     484:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     486:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     488:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     48a:	a7 98       	cbi	0x14, 7	; 20

        /* read high nibble first */
        lcd_e_high();
     48c:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
     48e:	00 c0       	rjmp	.+0      	; 0x490 <lcd_waitbusy+0x20>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     490:	9c 9b       	sbis	0x13, 4	; 19
     492:	02 c0       	rjmp	.+4      	; 0x498 <lcd_waitbusy+0x28>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	01 c0       	rjmp	.+2      	; 0x49a <lcd_waitbusy+0x2a>
     498:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     49a:	9d 99       	sbic	0x13, 5	; 19
     49c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     49e:	9e 99       	sbic	0x13, 6	; 19
     4a0:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     4a2:	9f 99       	sbic	0x13, 7	; 19
     4a4:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     4a6:	de 98       	cbi	0x1b, 6	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_waitbusy+0x3a>

        /* read low nibble */
        lcd_e_high();
     4aa:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <lcd_waitbusy+0x3e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     4ae:	9c 99       	sbic	0x13, 4	; 19
     4b0:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     4b2:	9d 99       	sbic	0x13, 5	; 19
     4b4:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     4b6:	9e 99       	sbic	0x13, 6	; 19
     4b8:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
     4ba:	9f 99       	sbic	0x13, 7	; 19
     4bc:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     4be:	de 98       	cbi	0x1b, 6	; 27
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter

}/* lcd_waitbusy */
     4c0:	08 95       	ret

000004c2 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     4c2:	1f 93       	push	r17
     4c4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     4c6:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
    lcd_write(cmd,0);
     4ca:	81 2f       	mov	r24, r17
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_write>
}
     4d2:	1f 91       	pop	r17
     4d4:	08 95       	ret

000004d6 <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     4d6:	1f 93       	push	r17
     4d8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     4da:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
    lcd_write(data,1);
     4de:	81 2f       	mov	r24, r17
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_write>
}
     4e6:	1f 91       	pop	r17
     4e8:	08 95       	ret

000004ea <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
     4ea:	66 23       	and	r22, r22
     4ec:	11 f4       	brne	.+4      	; 0x4f2 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     4ee:	80 58       	subi	r24, 0x80	; 128
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     4f2:	80 54       	subi	r24, 0x40	; 64
     4f4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
     4f8:	08 95       	ret

000004fa <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     4fa:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
}
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	08 95       	ret

00000502 <lcd_clear>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clear(void)
{
    lcd_command(1<<LCD_CLR);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
}
     508:	08 95       	ret

0000050a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
}
     510:	08 95       	ret

00000512 <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     512:	1f 93       	push	r17
     514:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     516:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
    if (c=='\n')
     51a:	1a 30       	cpi	r17, 0x0A	; 10
     51c:	49 f4       	brne	.+18     	; 0x530 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     51e:	80 34       	cpi	r24, 0x40	; 64
     520:	10 f0       	brcs	.+4      	; 0x526 <lcd_putc+0x14>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	01 c0       	rjmp	.+2      	; 0x528 <lcd_putc+0x16>
     526:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     528:	80 58       	subi	r24, 0x80	; 128
     52a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
     52e:	04 c0       	rjmp	.+8      	; 0x538 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     530:	81 2f       	mov	r24, r17
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_write>
    }

}/* lcd_putc */
     538:	1f 91       	pop	r17
     53a:	08 95       	ret

0000053c <lcd_string>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
     542:	02 c0       	rjmp	.+4      	; 0x548 <lcd_string+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     544:	0e 94 89 02 	call	0x512	; 0x512 <lcd_putc>
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     548:	89 91       	ld	r24, Y+
     54a:	88 23       	and	r24, r24
     54c:	d9 f7       	brne	.-10     	; 0x544 <lcd_string+0x8>
        lcd_putc(c);
    }

}/* lcd_string */
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
     55a:	02 c0       	rjmp	.+4      	; 0x560 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     55c:	0e 94 89 02 	call	0x512	; 0x512 <lcd_putc>
     560:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     562:	21 96       	adiw	r28, 0x01	; 1
     564:	84 91       	lpm	r24, Z+
     566:	88 23       	and	r24, r24
     568:	c9 f7       	brne	.-14     	; 0x55c <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <lcd_string_X>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_string_X(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <lcd_string_X+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     578:	0e 94 89 02 	call	0x512	; 0x512 <lcd_putc>
     57c:	fe 01       	movw	r30, r28
void lcd_string_X(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     57e:	21 96       	adiw	r28, 0x01	; 1
     580:	84 91       	lpm	r24, Z+
     582:	88 23       	and	r24, r24
     584:	c9 f7       	brne	.-14     	; 0x578 <lcd_string_X+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <lcd_init>:
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     58c:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     58e:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     590:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     592:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     594:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     596:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     598:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	9d e7       	ldi	r25, 0x7D	; 125
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     5a2:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     5a4:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     5a6:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <lcd_init+0x1e>
    lcd_e_low();
     5aa:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	97 e2       	ldi	r25, 0x27	; 39
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <lcd_init+0x24>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     5b4:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <lcd_init+0x2c>
    lcd_e_low();
     5b8:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_init+0x34>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     5c4:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <lcd_init+0x3c>
    lcd_e_low();
     5c8:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5ca:	fc 01       	movw	r30, r24
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     5d0:	ac 98       	cbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     5d2:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <lcd_init+0x4a>
    lcd_e_low();
     5d6:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     5dc:	88 e2       	ldi	r24, 0x28	; 40
     5de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
    lcd_clear();                           /* display clear                */
     5e8:	0e 94 81 02 	call	0x502	; 0x502 <lcd_clear>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     5ec:	86 e0       	ldi	r24, 0x06	; 6
     5ee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     5f2:	8c e0       	ldi	r24, 0x0C	; 12
     5f4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_command>

}/* lcd_init */
     5f8:	08 95       	ret

000005fa <main>:
#include "serial.h"
#include "lcd.h"


int main()
{ lcd_init();
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	a8 97       	sbiw	r28, 0x28	; 40
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	0e 94 c6 02 	call	0x58c	; 0x58c <lcd_init>
	lcd_clear();
     612:	0e 94 81 02 	call	0x502	; 0x502 <lcd_clear>
	lcd_string("Programm initz");
     616:	80 e6       	ldi	r24, 0x60	; 96
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>
	
	serial_init(9600);
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	95 e2       	ldi	r25, 0x25	; 37
     622:	0e 94 a7 00 	call	0x14e	; 0x14e <serial_init>
		serial_select(2);  //2 for wifi, 3 for gps
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <serial_select>

	wifi_init();
     62e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <wifi_init>
		int a=wifi_connect(PSTR("pratyush"),PSTR("poolloop"));
     632:	8d e5       	ldi	r24, 0x5D	; 93
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	64 e5       	ldi	r22, 0x54	; 84
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	0e 94 06 06 	call	0xc0c	; 0xc0c <wifi_connect>
		lcd_clear();
     63e:	0e 94 81 02 	call	0x502	; 0x502 <lcd_clear>
		if(a=0)lcd_string("No wifi");
		if(a=1)lcd_string("Connected");
     642:	8f e6       	ldi	r24, 0x6F	; 111
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>

char response[40],key[40],time[15],date[15];

//wifi_http_get("http://api.timezonedb.com/v2/get-time-zone?key=D70CN5FUSM98&format=json&fields=formatted&by=zone&zone=Asia/Kolkata",json);
lcd_clear();
     64a:	0e 94 81 02 	call	0x502	; 0x502 <lcd_clear>
lcd_string("Here");
     64e:	89 e7       	ldi	r24, 0x79	; 121
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>
//wifi_http_get("api.clobous.com/E64744/button/retrieve?key1",response);	//here we are retreiving the btn1 value in the response variable 


wifi_http_get("api.clobous.com/E64744/data/update?key1=test");	
     656:	8e e7       	ldi	r24, 0x7E	; 126
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 52 06 	call	0xca4	; 0xca4 <wifi_http_get>
	
	
	lcd_clear();
     65e:	0e 94 81 02 	call	0x502	; 0x502 <lcd_clear>
lcd_string("NOW");
     662:	8b ea       	ldi	r24, 0xAB	; 171
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>
	
	//jsonparser for btn 1 starts here
	
	//jsonparser(response,"key1",result_btn1);		//the response is char type so we are asking a particular value of a key, so in order to eract that value jsonparser is used
	
	lcd_gotoxy(0,1);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_gotoxy>
	lcd_string(response);	//for displaying the result
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>
     67a:	ff cf       	rjmp	.-2      	; 0x67a <main+0x80>

0000067c <lcd_num>:

/*************************************************************************
Snumber display
*************************************************************************/
void lcd_num(long num)
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	27 97       	sbiw	r28, 0x07	; 7
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
char buffer[7];

 ltoa( num , buffer, 10);
     694:	8e 01       	movw	r16, r28
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	a8 01       	movw	r20, r16
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	0e 94 a8 08 	call	0x1150	; 0x1150 <ltoa>
    lcd_string(buffer);
     6a4:	c8 01       	movw	r24, r16
     6a6:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_string>
}
     6aa:	27 96       	adiw	r28, 0x07	; 7
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <serial_numl>:
}



void serial_numl(long num)
{
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	27 97       	sbiw	r28, 0x07	; 7
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
     6d8:	8e 01       	movw	r16, r28
     6da:	0f 5f       	subi	r16, 0xFF	; 255
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	a8 01       	movw	r20, r16
     6e0:	2a e0       	ldi	r18, 0x0A	; 10
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	0e 94 a8 08 	call	0x1150	; 0x1150 <ltoa>
    serial_string(buffer);
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 38 01 	call	0x270	; 0x270 <serial_string>
}
     6ee:	27 96       	adiw	r28, 0x07	; 7
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <serial_num>:

void serial_num(int num)
{
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	27 97       	sbiw	r28, 0x07	; 7
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 itoa( num , buffer, 10);
     71c:	8e 01       	movw	r16, r28
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	b8 01       	movw	r22, r16
     724:	4a e0       	ldi	r20, 0x0A	; 10
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	0e 94 87 08 	call	0x110e	; 0x110e <itoa>
    serial_string(buffer);
     72c:	c8 01       	movw	r24, r16
     72e:	0e 94 38 01 	call	0x270	; 0x270 <serial_string>
}
     732:	27 96       	adiw	r28, 0x07	; 7
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <read>:
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	f9 f0       	breq	.+62     	; 0x78a <read+0x42>
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	18 f4       	brcc	.+6      	; 0x756 <read+0xe>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	31 f4       	brne	.+12     	; 0x760 <read+0x18>
     754:	07 c0       	rjmp	.+14     	; 0x764 <read+0x1c>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	59 f1       	breq	.+86     	; 0x7b0 <read+0x68>
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	09 f4       	brne	.+2      	; 0x760 <read+0x18>
     75e:	42 c0       	rjmp	.+132    	; 0x7e4 <read+0x9c>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	08 95       	ret
     764:	69 30       	cpi	r22, 0x09	; 9
     766:	19 f4       	brne	.+6      	; 0x76e <read+0x26>
     768:	1a ba       	out	0x1a, r1	; 26
     76a:	89 b3       	in	r24, 0x19	; 25
     76c:	08 95       	ret
     76e:	8a b3       	in	r24, 0x1a	; 26
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	06 2e       	mov	r0, r22
     776:	02 c0       	rjmp	.+4      	; 0x77c <read+0x34>
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	0a 94       	dec	r0
     77e:	e2 f7       	brpl	.-8      	; 0x778 <read+0x30>
     780:	20 95       	com	r18
     782:	28 23       	and	r18, r24
     784:	2a bb       	out	0x1a, r18	; 26
     786:	89 b3       	in	r24, 0x19	; 25
     788:	25 c0       	rjmp	.+74     	; 0x7d4 <read+0x8c>
     78a:	69 30       	cpi	r22, 0x09	; 9
     78c:	19 f4       	brne	.+6      	; 0x794 <read+0x4c>
     78e:	17 ba       	out	0x17, r1	; 23
     790:	86 b3       	in	r24, 0x16	; 22
     792:	08 95       	ret
     794:	87 b3       	in	r24, 0x17	; 23
     796:	21 e0       	ldi	r18, 0x01	; 1
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	06 2e       	mov	r0, r22
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <read+0x5a>
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <read+0x56>
     7a6:	20 95       	com	r18
     7a8:	28 23       	and	r18, r24
     7aa:	27 bb       	out	0x17, r18	; 23
     7ac:	86 b3       	in	r24, 0x16	; 22
     7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <read+0x8c>
     7b0:	69 30       	cpi	r22, 0x09	; 9
     7b2:	19 f4       	brne	.+6      	; 0x7ba <read+0x72>
     7b4:	14 ba       	out	0x14, r1	; 20
     7b6:	83 b3       	in	r24, 0x13	; 19
     7b8:	08 95       	ret
     7ba:	84 b3       	in	r24, 0x14	; 20
     7bc:	21 e0       	ldi	r18, 0x01	; 1
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	06 2e       	mov	r0, r22
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <read+0x80>
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	0a 94       	dec	r0
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <read+0x7c>
     7cc:	20 95       	com	r18
     7ce:	28 23       	and	r18, r24
     7d0:	24 bb       	out	0x14, r18	; 20
     7d2:	83 b3       	in	r24, 0x13	; 19
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <read+0x94>
     7d8:	95 95       	asr	r25
     7da:	87 95       	ror	r24
     7dc:	6a 95       	dec	r22
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <read+0x90>
     7e0:	81 70       	andi	r24, 0x01	; 1
     7e2:	08 95       	ret
     7e4:	69 30       	cpi	r22, 0x09	; 9
     7e6:	19 f4       	brne	.+6      	; 0x7ee <read+0xa6>
     7e8:	11 ba       	out	0x11, r1	; 17
     7ea:	80 b3       	in	r24, 0x10	; 16
     7ec:	08 95       	ret
     7ee:	31 b3       	in	r19, 0x11	; 17
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	06 2e       	mov	r0, r22
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <read+0xb4>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	0a 94       	dec	r0
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <read+0xb0>
     800:	28 2f       	mov	r18, r24
     802:	20 95       	com	r18
     804:	23 23       	and	r18, r19
     806:	21 bb       	out	0x11, r18	; 17
     808:	22 b3       	in	r18, 0x12	; 18
     80a:	82 2b       	or	r24, r18
     80c:	82 bb       	out	0x12, r24	; 18
     80e:	80 b3       	in	r24, 0x10	; 16
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <read+0xd0>
     814:	95 95       	asr	r25
     816:	87 95       	ror	r24
     818:	6a 95       	dec	r22
     81a:	e2 f7       	brpl	.-8      	; 0x814 <read+0xcc>
     81c:	81 70       	andi	r24, 0x01	; 1
     81e:	08 95       	ret

00000820 <write>:
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	09 f4       	brne	.+2      	; 0x826 <write+0x6>
     824:	41 c0       	rjmp	.+130    	; 0x8a8 <__stack+0x49>
     826:	83 30       	cpi	r24, 0x03	; 3
     828:	20 f4       	brcc	.+8      	; 0x832 <write+0x12>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	09 f0       	breq	.+2      	; 0x830 <write+0x10>
     82e:	d7 c0       	rjmp	.+430    	; 0x9de <__stack+0x17f>
     830:	07 c0       	rjmp	.+14     	; 0x840 <write+0x20>
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	09 f4       	brne	.+2      	; 0x838 <write+0x18>
     836:	6c c0       	rjmp	.+216    	; 0x910 <__stack+0xb1>
     838:	84 30       	cpi	r24, 0x04	; 4
     83a:	09 f0       	breq	.+2      	; 0x83e <write+0x1e>
     83c:	d0 c0       	rjmp	.+416    	; 0x9de <__stack+0x17f>
     83e:	9c c0       	rjmp	.+312    	; 0x978 <__stack+0x119>
     840:	6b 35       	cpi	r22, 0x5B	; 91
     842:	21 f4       	brne	.+8      	; 0x84c <write+0x2c>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	8a bb       	out	0x1a, r24	; 26
     848:	4b bb       	out	0x1b, r20	; 27
     84a:	08 95       	ret
     84c:	44 23       	and	r20, r20
     84e:	21 f0       	breq	.+8      	; 0x858 <write+0x38>
     850:	41 30       	cpi	r20, 0x01	; 1
     852:	09 f0       	breq	.+2      	; 0x856 <write+0x36>
     854:	c4 c0       	rjmp	.+392    	; 0x9de <__stack+0x17f>
     856:	14 c0       	rjmp	.+40     	; 0x880 <__stack+0x21>
     858:	69 30       	cpi	r22, 0x09	; 9
     85a:	21 f4       	brne	.+8      	; 0x864 <__stack+0x5>
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	8a bb       	out	0x1a, r24	; 26
     860:	1b ba       	out	0x1b, r1	; 27
     862:	08 95       	ret
     864:	8a b3       	in	r24, 0x1a	; 26
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	6a 95       	dec	r22
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	82 2b       	or	r24, r18
     876:	8a bb       	out	0x1a, r24	; 26
     878:	8b b3       	in	r24, 0x1b	; 27
     87a:	20 95       	com	r18
     87c:	28 23       	and	r18, r24
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <__stack+0x45>
     880:	69 30       	cpi	r22, 0x09	; 9
     882:	21 f4       	brne	.+8      	; 0x88c <__stack+0x2d>
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	8a bb       	out	0x1a, r24	; 26
     888:	8b bb       	out	0x1b, r24	; 27
     88a:	08 95       	ret
     88c:	8a b3       	in	r24, 0x1a	; 26
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	82 2b       	or	r24, r18
     89e:	8a bb       	out	0x1a, r24	; 26
     8a0:	8b b3       	in	r24, 0x1b	; 27
     8a2:	28 2b       	or	r18, r24
     8a4:	2b bb       	out	0x1b, r18	; 27
     8a6:	08 95       	ret
     8a8:	6b 35       	cpi	r22, 0x5B	; 91
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	87 bb       	out	0x17, r24	; 23
     8b0:	48 bb       	out	0x18, r20	; 24
     8b2:	08 95       	ret
     8b4:	44 23       	and	r20, r20
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <__stack+0x61>
     8b8:	41 30       	cpi	r20, 0x01	; 1
     8ba:	09 f0       	breq	.+2      	; 0x8be <__stack+0x5f>
     8bc:	90 c0       	rjmp	.+288    	; 0x9de <__stack+0x17f>
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <__stack+0x89>
     8c0:	69 30       	cpi	r22, 0x09	; 9
     8c2:	21 f4       	brne	.+8      	; 0x8cc <__stack+0x6d>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	87 bb       	out	0x17, r24	; 23
     8c8:	18 ba       	out	0x18, r1	; 24
     8ca:	08 95       	ret
     8cc:	87 b3       	in	r24, 0x17	; 23
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	6a 95       	dec	r22
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	82 2b       	or	r24, r18
     8de:	87 bb       	out	0x17, r24	; 23
     8e0:	88 b3       	in	r24, 0x18	; 24
     8e2:	20 95       	com	r18
     8e4:	28 23       	and	r18, r24
     8e6:	12 c0       	rjmp	.+36     	; 0x90c <__stack+0xad>
     8e8:	69 30       	cpi	r22, 0x09	; 9
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <__stack+0x95>
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	87 bb       	out	0x17, r24	; 23
     8f0:	88 bb       	out	0x18, r24	; 24
     8f2:	08 95       	ret
     8f4:	87 b3       	in	r24, 0x17	; 23
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
     8fc:	22 0f       	add	r18, r18
     8fe:	33 1f       	adc	r19, r19
     900:	6a 95       	dec	r22
     902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
     904:	82 2b       	or	r24, r18
     906:	87 bb       	out	0x17, r24	; 23
     908:	88 b3       	in	r24, 0x18	; 24
     90a:	28 2b       	or	r18, r24
     90c:	28 bb       	out	0x18, r18	; 24
     90e:	08 95       	ret
     910:	6b 35       	cpi	r22, 0x5B	; 91
     912:	21 f4       	brne	.+8      	; 0x91c <__stack+0xbd>
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	84 bb       	out	0x14, r24	; 20
     918:	45 bb       	out	0x15, r20	; 21
     91a:	08 95       	ret
     91c:	44 23       	and	r20, r20
     91e:	21 f0       	breq	.+8      	; 0x928 <__stack+0xc9>
     920:	41 30       	cpi	r20, 0x01	; 1
     922:	09 f0       	breq	.+2      	; 0x926 <__stack+0xc7>
     924:	5c c0       	rjmp	.+184    	; 0x9de <__stack+0x17f>
     926:	14 c0       	rjmp	.+40     	; 0x950 <__stack+0xf1>
     928:	69 30       	cpi	r22, 0x09	; 9
     92a:	21 f4       	brne	.+8      	; 0x934 <__stack+0xd5>
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	84 bb       	out	0x14, r24	; 20
     930:	15 ba       	out	0x15, r1	; 21
     932:	08 95       	ret
     934:	84 b3       	in	r24, 0x14	; 20
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0xe1>
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	6a 95       	dec	r22
     942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0xdd>
     944:	82 2b       	or	r24, r18
     946:	84 bb       	out	0x14, r24	; 20
     948:	85 b3       	in	r24, 0x15	; 21
     94a:	20 95       	com	r18
     94c:	28 23       	and	r18, r24
     94e:	12 c0       	rjmp	.+36     	; 0x974 <__stack+0x115>
     950:	69 30       	cpi	r22, 0x09	; 9
     952:	21 f4       	brne	.+8      	; 0x95c <__stack+0xfd>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	84 bb       	out	0x14, r24	; 20
     958:	85 bb       	out	0x15, r24	; 21
     95a:	08 95       	ret
     95c:	84 b3       	in	r24, 0x14	; 20
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x109>
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <__stack+0x105>
     96c:	82 2b       	or	r24, r18
     96e:	84 bb       	out	0x14, r24	; 20
     970:	85 b3       	in	r24, 0x15	; 21
     972:	28 2b       	or	r18, r24
     974:	25 bb       	out	0x15, r18	; 21
     976:	08 95       	ret
     978:	6b 35       	cpi	r22, 0x5B	; 91
     97a:	21 f4       	brne	.+8      	; 0x984 <__stack+0x125>
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	81 bb       	out	0x11, r24	; 17
     980:	42 bb       	out	0x12, r20	; 18
     982:	08 95       	ret
     984:	44 23       	and	r20, r20
     986:	19 f0       	breq	.+6      	; 0x98e <__stack+0x12f>
     988:	41 30       	cpi	r20, 0x01	; 1
     98a:	49 f5       	brne	.+82     	; 0x9de <__stack+0x17f>
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <__stack+0x159>
     98e:	69 30       	cpi	r22, 0x09	; 9
     990:	21 f4       	brne	.+8      	; 0x99a <__stack+0x13b>
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	81 bb       	out	0x11, r24	; 17
     996:	12 ba       	out	0x12, r1	; 18
     998:	08 95       	ret
     99a:	81 b3       	in	r24, 0x11	; 17
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0x147>
     9a2:	22 0f       	add	r18, r18
     9a4:	33 1f       	adc	r19, r19
     9a6:	6a 95       	dec	r22
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <__stack+0x143>
     9aa:	82 2b       	or	r24, r18
     9ac:	81 bb       	out	0x11, r24	; 17
     9ae:	82 b3       	in	r24, 0x12	; 18
     9b0:	20 95       	com	r18
     9b2:	28 23       	and	r18, r24
     9b4:	22 bb       	out	0x12, r18	; 18
     9b6:	08 95       	ret
     9b8:	69 30       	cpi	r22, 0x09	; 9
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <__stack+0x165>
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	81 bb       	out	0x11, r24	; 17
     9c0:	82 bb       	out	0x12, r24	; 18
     9c2:	08 95       	ret
     9c4:	81 b3       	in	r24, 0x11	; 17
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0x171>
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	6a 95       	dec	r22
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <__stack+0x16d>
     9d4:	82 2b       	or	r24, r18
     9d6:	81 bb       	out	0x11, r24	; 17
     9d8:	82 b3       	in	r24, 0x12	; 18
     9da:	28 2b       	or	r18, r24
     9dc:	22 bb       	out	0x12, r18	; 18
     9de:	08 95       	ret

000009e0 <direction>:
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	19 f1       	breq	.+70     	; 0xa2a <direction+0x4a>
     9e4:	84 30       	cpi	r24, 0x04	; 4
     9e6:	09 f4       	brne	.+2      	; 0x9ea <direction+0xa>
     9e8:	3c c0       	rjmp	.+120    	; 0xa62 <direction+0x82>
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <direction+0x10>
     9ee:	54 c0       	rjmp	.+168    	; 0xa98 <direction+0xb8>
     9f0:	44 23       	and	r20, r20
     9f2:	21 f0       	breq	.+8      	; 0x9fc <direction+0x1c>
     9f4:	41 30       	cpi	r20, 0x01	; 1
     9f6:	09 f0       	breq	.+2      	; 0x9fa <direction+0x1a>
     9f8:	4f c0       	rjmp	.+158    	; 0xa98 <direction+0xb8>
     9fa:	0c c0       	rjmp	.+24     	; 0xa14 <direction+0x34>
     9fc:	27 b3       	in	r18, 0x17	; 23
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <direction+0x28>
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	6a 95       	dec	r22
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <direction+0x24>
     a0c:	80 95       	com	r24
     a0e:	82 23       	and	r24, r18
     a10:	87 bb       	out	0x17, r24	; 23
     a12:	08 95       	ret
     a14:	27 b3       	in	r18, 0x17	; 23
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <direction+0x40>
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	6a 95       	dec	r22
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <direction+0x3c>
     a24:	28 2b       	or	r18, r24
     a26:	27 bb       	out	0x17, r18	; 23
     a28:	08 95       	ret
     a2a:	44 23       	and	r20, r20
     a2c:	19 f0       	breq	.+6      	; 0xa34 <direction+0x54>
     a2e:	41 30       	cpi	r20, 0x01	; 1
     a30:	99 f5       	brne	.+102    	; 0xa98 <direction+0xb8>
     a32:	0c c0       	rjmp	.+24     	; 0xa4c <direction+0x6c>
     a34:	24 b3       	in	r18, 0x14	; 20
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <direction+0x60>
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	6a 95       	dec	r22
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <direction+0x5c>
     a44:	80 95       	com	r24
     a46:	82 23       	and	r24, r18
     a48:	84 bb       	out	0x14, r24	; 20
     a4a:	08 95       	ret
     a4c:	24 b3       	in	r18, 0x14	; 20
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <direction+0x78>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	6a 95       	dec	r22
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <direction+0x74>
     a5c:	28 2b       	or	r18, r24
     a5e:	24 bb       	out	0x14, r18	; 20
     a60:	08 95       	ret
     a62:	44 23       	and	r20, r20
     a64:	19 f0       	breq	.+6      	; 0xa6c <direction+0x8c>
     a66:	41 30       	cpi	r20, 0x01	; 1
     a68:	b9 f4       	brne	.+46     	; 0xa98 <direction+0xb8>
     a6a:	0c c0       	rjmp	.+24     	; 0xa84 <direction+0xa4>
     a6c:	21 b3       	in	r18, 0x11	; 17
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <direction+0x98>
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <direction+0x94>
     a7c:	80 95       	com	r24
     a7e:	82 23       	and	r24, r18
     a80:	81 bb       	out	0x11, r24	; 17
     a82:	08 95       	ret
     a84:	21 b3       	in	r18, 0x11	; 17
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <direction+0xb0>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <direction+0xac>
     a94:	28 2b       	or	r18, r24
     a96:	21 bb       	out	0x11, r18	; 17
     a98:	08 95       	ret

00000a9a <serial_select>:
     a9a:	88 23       	and	r24, r24
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <serial_select+0xc>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	67 e0       	ldi	r22, 0x07	; 7
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <serial_select+0x14>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	41 f4       	brne	.+16     	; 0xaba <serial_select+0x20>
     aaa:	67 e0       	ldi	r22, 0x07	; 7
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	0e 94 10 04 	call	0x820	; 0x820 <write>
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	0a c0       	rjmp	.+20     	; 0xace <serial_select+0x34>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	59 f4       	brne	.+22     	; 0xad4 <serial_select+0x3a>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	67 e0       	ldi	r22, 0x07	; 7
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	0e 94 10 04 	call	0x820	; 0x820 <write>
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	62 e0       	ldi	r22, 0x02	; 2
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	0e 94 10 04 	call	0x820	; 0x820 <write>
     ad2:	08 95       	ret
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	51 f4       	brne	.+20     	; 0xaec <serial_select+0x52>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	67 e0       	ldi	r22, 0x07	; 7
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	0e 94 10 04 	call	0x820	; 0x820 <write>
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	62 e0       	ldi	r22, 0x02	; 2
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	0e 94 10 04 	call	0x820	; 0x820 <write>
     aec:	08 95       	ret

00000aee <jsonparser>:
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ea 01       	movw	r28, r20
     afc:	0e 94 6d 08 	call	0x10da	; 0x10da <strstr>
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	19 f4       	brne	.+6      	; 0xb0a <jsonparser+0x1c>
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	1d c0       	rjmp	.+58     	; 0xb44 <jsonparser+0x56>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	6f ea       	ldi	r22, 0xAF	; 175
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	0e 94 6d 08 	call	0x10da	; 0x10da <strstr>
     b14:	7c 01       	movw	r14, r24
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	e8 0e       	add	r14, r24
     b1c:	f9 1e       	adc	r15, r25
     b1e:	c7 01       	movw	r24, r14
     b20:	62 e2       	ldi	r22, 0x22	; 34
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 34 08 	call	0x1068	; 0x1068 <strchr>
     b28:	8c 01       	movw	r16, r24
     b2a:	0e 19       	sub	r16, r14
     b2c:	1f 09       	sbc	r17, r15
     b2e:	ce 01       	movw	r24, r28
     b30:	b7 01       	movw	r22, r14
     b32:	a8 01       	movw	r20, r16
     b34:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strncpy>
     b38:	0c 0f       	add	r16, r28
     b3a:	1d 1f       	adc	r17, r29
     b3c:	f8 01       	movw	r30, r16
     b3e:	10 82       	st	Z, r1
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	c9 01       	movw	r24, r18
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <compare>:
     b54:	db 01       	movw	r26, r22
     b56:	0d 90       	ld	r0, X+
     b58:	00 20       	and	r0, r0
     b5a:	e9 f7       	brne	.-6      	; 0xb56 <compare+0x2>
     b5c:	11 97       	sbiw	r26, 0x01	; 1
     b5e:	a6 1b       	sub	r26, r22
     b60:	b7 0b       	sbc	r27, r23
     b62:	4a 2f       	mov	r20, r26
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	0e 94 46 08 	call	0x108c	; 0x108c <strncasecmp>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	89 2b       	or	r24, r25
     b70:	11 f4       	brne	.+4      	; 0xb76 <compare+0x22>
     b72:	21 e0       	ldi	r18, 0x01	; 1
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	c9 01       	movw	r24, r18
     b78:	08 95       	ret

00000b7a <str_num>:
     b7a:	0e 94 16 08 	call	0x102c	; 0x102c <atoi>
     b7e:	08 95       	ret

00000b80 <WaitForWResponse>:
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	6c 01       	movw	r12, r24
     b94:	ff 24       	eor	r15, r15
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b9a:	80 ea       	ldi	r24, 0xA0	; 160
     b9c:	a8 2e       	mov	r10, r24
     b9e:	8f e0       	ldi	r24, 0x0F	; 15
     ba0:	b8 2e       	mov	r11, r24
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <WaitForWResponse+0x2c>
     ba4:	21 96       	adiw	r28, 0x01	; 1
     ba6:	c5 01       	movw	r24, r10
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <WaitForWResponse+0x28>
     bac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <serial_available>
     bb0:	89 2b       	or	r24, r25
     bb2:	19 f4       	brne	.+6      	; 0xbba <WaitForWResponse+0x3a>
     bb4:	cc 15       	cp	r28, r12
     bb6:	dd 05       	cpc	r29, r13
     bb8:	a8 f3       	brcs	.-22     	; 0xba4 <WaitForWResponse+0x24>
     bba:	cc 15       	cp	r28, r12
     bbc:	dd 05       	cpc	r29, r13
     bbe:	c9 f0       	breq	.+50     	; 0xbf2 <WaitForWResponse+0x72>
     bc0:	0f 2d       	mov	r16, r15
     bc2:	10 e0       	ldi	r17, 0x00	; 0
     bc4:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     bc8:	f8 01       	movw	r30, r16
     bca:	e0 52       	subi	r30, 0x20	; 32
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	80 83       	st	Z, r24
     bd0:	8a 30       	cpi	r24, 0x0A	; 10
     bd2:	69 f4       	brne	.+26     	; 0xbee <WaitForWResponse+0x6e>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	8f 15       	cp	r24, r15
     bd8:	50 f4       	brcc	.+20     	; 0xbee <WaitForWResponse+0x6e>
     bda:	0e 94 8a 01 	call	0x314	; 0x314 <s_clearbuffer>
     bde:	98 01       	movw	r18, r16
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	30 40       	sbci	r19, 0x00	; 0
     be4:	f9 01       	movw	r30, r18
     be6:	e0 52       	subi	r30, 0x20	; 32
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	10 82       	st	Z, r1
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <WaitForWResponse+0x76>
     bee:	f3 94       	inc	r15
     bf0:	dd cf       	rjmp	.-70     	; 0xbac <WaitForWResponse+0x2c>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	c9 01       	movw	r24, r18
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	08 95       	ret

00000c0c <wifi_connect>:
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	8b 01       	movw	r16, r22
     c18:	8b ef       	ldi	r24, 0xFB	; 251
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c20:	84 ec       	ldi	r24, 0xC4	; 196
     c22:	99 e0       	ldi	r25, 0x09	; 9
     c24:	20 e9       	ldi	r18, 0x90	; 144
     c26:	31 e0       	ldi	r19, 0x01	; 1
     c28:	f9 01       	movw	r30, r18
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <wifi_connect+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c30:	d9 f7       	brne	.-10     	; 0xc28 <wifi_connect+0x1c>
     c32:	80 ed       	ldi	r24, 0xD0	; 208
     c34:	97 e0       	ldi	r25, 0x07	; 7
     c36:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     c3a:	8d ee       	ldi	r24, 0xED	; 237
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c42:	84 ec       	ldi	r24, 0xC4	; 196
     c44:	99 e0       	ldi	r25, 0x09	; 9
     c46:	20 e9       	ldi	r18, 0x90	; 144
     c48:	31 e0       	ldi	r19, 0x01	; 1
     c4a:	f9 01       	movw	r30, r18
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <wifi_connect+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	d9 f7       	brne	.-10     	; 0xc4a <wifi_connect+0x3e>
     c54:	80 ed       	ldi	r24, 0xD0	; 208
     c56:	97 e0       	ldi	r25, 0x07	; 7
     c58:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     c5c:	0e 94 8a 01 	call	0x314	; 0x314 <s_clearbuffer>
     c60:	82 ee       	ldi	r24, 0xE2	; 226
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c6e:	8e ed       	ldi	r24, 0xDE	; 222
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c76:	c8 01       	movw	r24, r16
     c78:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c7c:	8a ed       	ldi	r24, 0xDA	; 218
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     c84:	88 ec       	ldi	r24, 0xC8	; 200
     c86:	92 e3       	ldi	r25, 0x32	; 50
     c88:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	04 97       	sbiw	r24, 0x04	; 4
     c92:	11 f4       	brne	.+4      	; 0xc98 <wifi_connect+0x8c>
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	c9 01       	movw	r24, r18
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <wifi_http_get>:
     ca4:	6f 92       	push	r6
     ca6:	7f 92       	push	r7
     ca8:	8f 92       	push	r8
     caa:	9f 92       	push	r9
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	c4 56       	subi	r28, 0x64	; 100
     cc6:	d0 40       	sbci	r29, 0x00	; 0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	6c 01       	movw	r12, r24
     cd4:	3b 01       	movw	r6, r22
     cd6:	0e 94 8a 01 	call	0x314	; 0x314 <s_clearbuffer>
     cda:	c6 01       	movw	r24, r12
     cdc:	6f e2       	ldi	r22, 0x2F	; 47
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 34 08 	call	0x1068	; 0x1068 <strchr>
     ce4:	5c 01       	movw	r10, r24
     ce6:	7c 01       	movw	r14, r24
     ce8:	ec 18       	sub	r14, r12
     cea:	fd 08       	sbc	r15, r13
     cec:	8e 01       	movw	r16, r28
     cee:	0f 5f       	subi	r16, 0xFF	; 255
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	c8 01       	movw	r24, r16
     cf4:	b6 01       	movw	r22, r12
     cf6:	a7 01       	movw	r20, r14
     cf8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strncpy>
     cfc:	d8 01       	movw	r26, r16
     cfe:	0d 90       	ld	r0, X+
     d00:	00 20       	and	r0, r0
     d02:	e9 f7       	brne	.-6      	; 0xcfe <wifi_http_get+0x5a>
     d04:	6d 01       	movw	r12, r26
     d06:	08 94       	sec
     d08:	c1 08       	sbc	r12, r1
     d0a:	d1 08       	sbc	r13, r1
     d0c:	c0 1a       	sub	r12, r16
     d0e:	d1 0a       	sbc	r13, r17
     d10:	f5 01       	movw	r30, r10
     d12:	31 96       	adiw	r30, 0x01	; 1
     d14:	df 01       	movw	r26, r30
     d16:	0d 90       	ld	r0, X+
     d18:	00 20       	and	r0, r0
     d1a:	e9 f7       	brne	.-6      	; 0xd16 <wifi_http_get+0x72>
     d1c:	4d 01       	movw	r8, r26
     d1e:	08 94       	sec
     d20:	81 08       	sbc	r8, r1
     d22:	91 08       	sbc	r9, r1
     d24:	8e 1a       	sub	r8, r30
     d26:	9f 0a       	sbc	r9, r31
     d28:	e0 0e       	add	r14, r16
     d2a:	f1 1e       	adc	r15, r17
     d2c:	f7 01       	movw	r30, r14
     d2e:	10 82       	st	Z, r1
     d30:	84 ec       	ldi	r24, 0xC4	; 196
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 38 01 	call	0x270	; 0x270 <serial_string>
     d3e:	8d eb       	ldi	r24, 0xBD	; 189
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     d46:	00 e0       	ldi	r16, 0x00	; 0
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	20 ea       	ldi	r18, 0xA0	; 160
     d4c:	e2 2e       	mov	r14, r18
     d4e:	2f e0       	ldi	r18, 0x0F	; 15
     d50:	f2 2e       	mov	r15, r18
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <wifi_http_get+0xba>
     d54:	0f 5f       	subi	r16, 0xFF	; 255
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	c7 01       	movw	r24, r14
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <wifi_http_get+0xb6>
     d5e:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     d62:	83 34       	cpi	r24, 0x43	; 67
     d64:	91 05       	cpc	r25, r1
     d66:	21 f0       	breq	.+8      	; 0xd70 <wifi_http_get+0xcc>
     d68:	fd e0       	ldi	r31, 0x0D	; 13
     d6a:	0c 3a       	cpi	r16, 0xAC	; 172
     d6c:	1f 07       	cpc	r17, r31
     d6e:	91 f7       	brne	.-28     	; 0xd54 <wifi_http_get+0xb0>
     d70:	8c e2       	ldi	r24, 0x2C	; 44
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	20 e9       	ldi	r18, 0x90	; 144
     d76:	31 e0       	ldi	r19, 0x01	; 1
     d78:	f9 01       	movw	r30, r18
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <wifi_http_get+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	d9 f7       	brne	.-10     	; 0xd78 <wifi_http_get+0xd4>
     d82:	0e 94 8a 01 	call	0x314	; 0x314 <s_clearbuffer>
     d86:	8f ea       	ldi	r24, 0xAF	; 175
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     d8e:	c8 0c       	add	r12, r8
     d90:	d9 1c       	adc	r13, r9
     d92:	c6 01       	movw	r24, r12
     d94:	80 5c       	subi	r24, 0xC0	; 192
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	0e 94 82 03 	call	0x704	; 0x704 <serial_num>
     d9c:	8c ea       	ldi	r24, 0xAC	; 172
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     da4:	cc 24       	eor	r12, r12
     da6:	dd 24       	eor	r13, r13
     da8:	00 ea       	ldi	r16, 0xA0	; 160
     daa:	1f e0       	ldi	r17, 0x0F	; 15
     dac:	06 c0       	rjmp	.+12     	; 0xdba <wifi_http_get+0x116>
     dae:	08 94       	sec
     db0:	c1 1c       	adc	r12, r1
     db2:	d1 1c       	adc	r13, r1
     db4:	c8 01       	movw	r24, r16
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <wifi_http_get+0x112>
     dba:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     dbe:	ce 97       	sbiw	r24, 0x3e	; 62
     dc0:	29 f0       	breq	.+10     	; 0xdcc <wifi_http_get+0x128>
     dc2:	8c ea       	ldi	r24, 0xAC	; 172
     dc4:	c8 16       	cp	r12, r24
     dc6:	8d e0       	ldi	r24, 0x0D	; 13
     dc8:	d8 06       	cpc	r13, r24
     dca:	89 f7       	brne	.-30     	; 0xdae <wifi_http_get+0x10a>
     dcc:	86 ea       	ldi	r24, 0xA6	; 166
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     dd4:	c5 01       	movw	r24, r10
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0e 94 38 01 	call	0x270	; 0x270 <serial_string>
     ddc:	8a e9       	ldi	r24, 0x9A	; 154
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     dec:	86 e8       	ldi	r24, 0x86	; 134
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     df4:	88 ec       	ldi	r24, 0xC8	; 200
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     dfc:	82 e7       	ldi	r24, 0x72	; 114
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     e04:	88 ec       	ldi	r24, 0xC8	; 200
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     e0c:	8b e6       	ldi	r24, 0x6B	; 107
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 38 01 	call	0x270	; 0x270 <serial_string>
     e1c:	86 e6       	ldi	r24, 0x66	; 102
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     e24:	88 ec       	ldi	r24, 0xC8	; 200
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     e2c:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     e30:	0a 97       	sbiw	r24, 0x0a	; 10
     e32:	e1 f7       	brne	.-8      	; 0xe2c <wifi_http_get+0x188>
     e34:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     e38:	8b 37       	cpi	r24, 0x7B	; 123
     e3a:	91 05       	cpc	r25, r1
     e3c:	d9 f7       	brne	.-10     	; 0xe34 <wifi_http_get+0x190>
     e3e:	8b e7       	ldi	r24, 0x7B	; 123
     e40:	80 93 e0 01 	sts	0x01E0, r24
     e44:	84 ef       	ldi	r24, 0xF4	; 244
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	20 e9       	ldi	r18, 0x90	; 144
     e4a:	31 e0       	ldi	r19, 0x01	; 1
     e4c:	f9 01       	movw	r30, r18
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <wifi_http_get+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	d9 f7       	brne	.-10     	; 0xe4c <wifi_http_get+0x1a8>
     e56:	01 e0       	ldi	r16, 0x01	; 1
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	90 ea       	ldi	r25, 0xA0	; 160
     e5c:	e9 2e       	mov	r14, r25
     e5e:	9f e0       	ldi	r25, 0x0F	; 15
     e60:	f9 2e       	mov	r15, r25
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <wifi_http_get+0x1cc>
     e64:	08 94       	sec
     e66:	c1 1c       	adc	r12, r1
     e68:	d1 1c       	adc	r13, r1
     e6a:	c7 01       	movw	r24, r14
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <wifi_http_get+0x1c8>
     e70:	0e 94 68 01 	call	0x2d0	; 0x2d0 <serial_available>
     e74:	89 2b       	or	r24, r25
     e76:	29 f4       	brne	.+10     	; 0xe82 <wifi_http_get+0x1de>
     e78:	a8 eb       	ldi	r26, 0xB8	; 184
     e7a:	ca 16       	cp	r12, r26
     e7c:	ab e0       	ldi	r26, 0x0B	; 11
     e7e:	da 06       	cpc	r13, r26
     e80:	88 f3       	brcs	.-30     	; 0xe64 <wifi_http_get+0x1c0>
     e82:	b8 eb       	ldi	r27, 0xB8	; 184
     e84:	cb 16       	cp	r12, r27
     e86:	bb e0       	ldi	r27, 0x0B	; 11
     e88:	db 06       	cpc	r13, r27
     e8a:	29 f1       	breq	.+74     	; 0xed6 <wifi_http_get+0x232>
     e8c:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     e90:	f8 01       	movw	r30, r16
     e92:	e0 52       	subi	r30, 0x20	; 32
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	80 83       	st	Z, r24
     e98:	8d 37       	cpi	r24, 0x7D	; 125
     e9a:	d1 f4       	brne	.+52     	; 0xed0 <wifi_http_get+0x22c>
     e9c:	0e 94 0f 01 	call	0x21e	; 0x21e <serial_read>
     ea0:	83 34       	cpi	r24, 0x43	; 67
     ea2:	91 05       	cpc	r25, r1
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <wifi_http_get+0x1f8>
     ea6:	84 ef       	ldi	r24, 0xF4	; 244
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	20 e9       	ldi	r18, 0x90	; 144
     eac:	31 e0       	ldi	r19, 0x01	; 1
     eae:	f9 01       	movw	r30, r18
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <wifi_http_get+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	d9 f7       	brne	.-10     	; 0xeae <wifi_http_get+0x20a>
     eb8:	00 52       	subi	r16, 0x20	; 32
     eba:	1e 4f       	sbci	r17, 0xFE	; 254
     ebc:	f8 01       	movw	r30, r16
     ebe:	11 82       	std	Z+1, r1	; 0x01
     ec0:	c3 01       	movw	r24, r6
     ec2:	60 ee       	ldi	r22, 0xE0	; 224
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	0e 94 3f 08 	call	0x107e	; 0x107e <strcpy>
     eca:	0e 94 8a 01 	call	0x314	; 0x314 <s_clearbuffer>
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <wifi_http_get+0x232>
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	cd cf       	rjmp	.-102    	; 0xe70 <wifi_http_get+0x1cc>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	cc 59       	subi	r28, 0x9C	; 156
     edc:	df 4f       	sbci	r29, 0xFF	; 255
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	9f 90       	pop	r9
     efe:	8f 90       	pop	r8
     f00:	7f 90       	pop	r7
     f02:	6f 90       	pop	r6
     f04:	08 95       	ret

00000f06 <wifi_restart>:
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 10 04 	call	0x820	; 0x820 <write>
     f16:	88 e8       	ldi	r24, 0x88	; 136
     f18:	93 e1       	ldi	r25, 0x13	; 19
     f1a:	20 e9       	ldi	r18, 0x90	; 144
     f1c:	31 e0       	ldi	r19, 0x01	; 1
     f1e:	f9 01       	movw	r30, r18
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <wifi_restart+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f26:	d9 f7       	brne	.-10     	; 0xf1e <wifi_restart+0x18>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	0e 94 10 04 	call	0x820	; 0x820 <write>
     f38:	80 e4       	ldi	r24, 0x40	; 64
     f3a:	9c e9       	ldi	r25, 0x9C	; 156
     f3c:	20 e9       	ldi	r18, 0x90	; 144
     f3e:	31 e0       	ldi	r19, 0x01	; 1
     f40:	f9 01       	movw	r30, r18
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <wifi_restart+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	d9 f7       	brne	.-10     	; 0xf40 <wifi_restart+0x3a>
     f4a:	08 95       	ret

00000f4c <wifi_init>:
     f4c:	0e 94 83 07 	call	0xf06	; 0xf06 <wifi_restart>
     f50:	89 e0       	ldi	r24, 0x09	; 9
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 42 01 	call	0x284	; 0x284 <serial_string_P>
     f58:	88 ec       	ldi	r24, 0xC8	; 200
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 c0 05 	call	0xb80	; 0xb80 <WaitForWResponse>
     f60:	08 95       	ret

00000f62 <wifi_off>:
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	0e 94 10 04 	call	0x820	; 0x820 <write>
     f72:	08 95       	ret

00000f74 <__mulsi3>:
     f74:	62 9f       	mul	r22, r18
     f76:	d0 01       	movw	r26, r0
     f78:	73 9f       	mul	r23, r19
     f7a:	f0 01       	movw	r30, r0
     f7c:	82 9f       	mul	r24, r18
     f7e:	e0 0d       	add	r30, r0
     f80:	f1 1d       	adc	r31, r1
     f82:	64 9f       	mul	r22, r20
     f84:	e0 0d       	add	r30, r0
     f86:	f1 1d       	adc	r31, r1
     f88:	92 9f       	mul	r25, r18
     f8a:	f0 0d       	add	r31, r0
     f8c:	83 9f       	mul	r24, r19
     f8e:	f0 0d       	add	r31, r0
     f90:	74 9f       	mul	r23, r20
     f92:	f0 0d       	add	r31, r0
     f94:	65 9f       	mul	r22, r21
     f96:	f0 0d       	add	r31, r0
     f98:	99 27       	eor	r25, r25
     f9a:	72 9f       	mul	r23, r18
     f9c:	b0 0d       	add	r27, r0
     f9e:	e1 1d       	adc	r30, r1
     fa0:	f9 1f       	adc	r31, r25
     fa2:	63 9f       	mul	r22, r19
     fa4:	b0 0d       	add	r27, r0
     fa6:	e1 1d       	adc	r30, r1
     fa8:	f9 1f       	adc	r31, r25
     faa:	bd 01       	movw	r22, r26
     fac:	cf 01       	movw	r24, r30
     fae:	11 24       	eor	r1, r1
     fb0:	08 95       	ret

00000fb2 <__udivmodsi4>:
     fb2:	a1 e2       	ldi	r26, 0x21	; 33
     fb4:	1a 2e       	mov	r1, r26
     fb6:	aa 1b       	sub	r26, r26
     fb8:	bb 1b       	sub	r27, r27
     fba:	fd 01       	movw	r30, r26
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <__udivmodsi4_ep>

00000fbe <__udivmodsi4_loop>:
     fbe:	aa 1f       	adc	r26, r26
     fc0:	bb 1f       	adc	r27, r27
     fc2:	ee 1f       	adc	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	a2 17       	cp	r26, r18
     fc8:	b3 07       	cpc	r27, r19
     fca:	e4 07       	cpc	r30, r20
     fcc:	f5 07       	cpc	r31, r21
     fce:	20 f0       	brcs	.+8      	; 0xfd8 <__udivmodsi4_ep>
     fd0:	a2 1b       	sub	r26, r18
     fd2:	b3 0b       	sbc	r27, r19
     fd4:	e4 0b       	sbc	r30, r20
     fd6:	f5 0b       	sbc	r31, r21

00000fd8 <__udivmodsi4_ep>:
     fd8:	66 1f       	adc	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a 94       	dec	r1
     fe2:	69 f7       	brne	.-38     	; 0xfbe <__udivmodsi4_loop>
     fe4:	60 95       	com	r22
     fe6:	70 95       	com	r23
     fe8:	80 95       	com	r24
     fea:	90 95       	com	r25
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	bd 01       	movw	r22, r26
     ff2:	cf 01       	movw	r24, r30
     ff4:	08 95       	ret

00000ff6 <__divmodsi4>:
     ff6:	97 fb       	bst	r25, 7
     ff8:	09 2e       	mov	r0, r25
     ffa:	05 26       	eor	r0, r21
     ffc:	0e d0       	rcall	.+28     	; 0x101a <__divmodsi4_neg1>
     ffe:	57 fd       	sbrc	r21, 7
    1000:	04 d0       	rcall	.+8      	; 0x100a <__divmodsi4_neg2>
    1002:	d7 df       	rcall	.-82     	; 0xfb2 <__udivmodsi4>
    1004:	0a d0       	rcall	.+20     	; 0x101a <__divmodsi4_neg1>
    1006:	00 1c       	adc	r0, r0
    1008:	38 f4       	brcc	.+14     	; 0x1018 <__divmodsi4_exit>

0000100a <__divmodsi4_neg2>:
    100a:	50 95       	com	r21
    100c:	40 95       	com	r20
    100e:	30 95       	com	r19
    1010:	21 95       	neg	r18
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	4f 4f       	sbci	r20, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255

00001018 <__divmodsi4_exit>:
    1018:	08 95       	ret

0000101a <__divmodsi4_neg1>:
    101a:	f6 f7       	brtc	.-4      	; 0x1018 <__divmodsi4_exit>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	08 95       	ret

0000102c <atoi>:
    102c:	fc 01       	movw	r30, r24
    102e:	88 27       	eor	r24, r24
    1030:	99 27       	eor	r25, r25
    1032:	e8 94       	clt
    1034:	21 91       	ld	r18, Z+
    1036:	20 32       	cpi	r18, 0x20	; 32
    1038:	e9 f3       	breq	.-6      	; 0x1034 <atoi+0x8>
    103a:	29 30       	cpi	r18, 0x09	; 9
    103c:	10 f0       	brcs	.+4      	; 0x1042 <atoi+0x16>
    103e:	2e 30       	cpi	r18, 0x0E	; 14
    1040:	c8 f3       	brcs	.-14     	; 0x1034 <atoi+0x8>
    1042:	2b 32       	cpi	r18, 0x2B	; 43
    1044:	41 f0       	breq	.+16     	; 0x1056 <atoi+0x2a>
    1046:	2d 32       	cpi	r18, 0x2D	; 45
    1048:	39 f4       	brne	.+14     	; 0x1058 <atoi+0x2c>
    104a:	68 94       	set
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <atoi+0x2a>
    104e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__mulhi_const_10>
    1052:	82 0f       	add	r24, r18
    1054:	91 1d       	adc	r25, r1
    1056:	21 91       	ld	r18, Z+
    1058:	20 53       	subi	r18, 0x30	; 48
    105a:	2a 30       	cpi	r18, 0x0A	; 10
    105c:	c0 f3       	brcs	.-16     	; 0x104e <atoi+0x22>
    105e:	1e f4       	brtc	.+6      	; 0x1066 <atoi+0x3a>
    1060:	90 95       	com	r25
    1062:	81 95       	neg	r24
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	08 95       	ret

00001068 <strchr>:
    1068:	fc 01       	movw	r30, r24
    106a:	81 91       	ld	r24, Z+
    106c:	86 17       	cp	r24, r22
    106e:	21 f0       	breq	.+8      	; 0x1078 <strchr+0x10>
    1070:	88 23       	and	r24, r24
    1072:	d9 f7       	brne	.-10     	; 0x106a <strchr+0x2>
    1074:	99 27       	eor	r25, r25
    1076:	08 95       	ret
    1078:	31 97       	sbiw	r30, 0x01	; 1
    107a:	cf 01       	movw	r24, r30
    107c:	08 95       	ret

0000107e <strcpy>:
    107e:	fb 01       	movw	r30, r22
    1080:	dc 01       	movw	r26, r24
    1082:	01 90       	ld	r0, Z+
    1084:	0d 92       	st	X+, r0
    1086:	00 20       	and	r0, r0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <strcpy+0x4>
    108a:	08 95       	ret

0000108c <strncasecmp>:
    108c:	fb 01       	movw	r30, r22
    108e:	dc 01       	movw	r26, r24
    1090:	41 50       	subi	r20, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	88 f0       	brcs	.+34     	; 0x10b8 <strncasecmp+0x2c>
    1096:	8d 91       	ld	r24, X+
    1098:	81 34       	cpi	r24, 0x41	; 65
    109a:	1c f0       	brlt	.+6      	; 0x10a2 <strncasecmp+0x16>
    109c:	8b 35       	cpi	r24, 0x5B	; 91
    109e:	0c f4       	brge	.+2      	; 0x10a2 <strncasecmp+0x16>
    10a0:	80 5e       	subi	r24, 0xE0	; 224
    10a2:	61 91       	ld	r22, Z+
    10a4:	61 34       	cpi	r22, 0x41	; 65
    10a6:	1c f0       	brlt	.+6      	; 0x10ae <strncasecmp+0x22>
    10a8:	6b 35       	cpi	r22, 0x5B	; 91
    10aa:	0c f4       	brge	.+2      	; 0x10ae <strncasecmp+0x22>
    10ac:	60 5e       	subi	r22, 0xE0	; 224
    10ae:	86 1b       	sub	r24, r22
    10b0:	61 11       	cpse	r22, r1
    10b2:	71 f3       	breq	.-36     	; 0x1090 <strncasecmp+0x4>
    10b4:	99 0b       	sbc	r25, r25
    10b6:	08 95       	ret
    10b8:	88 1b       	sub	r24, r24
    10ba:	fc cf       	rjmp	.-8      	; 0x10b4 <strncasecmp+0x28>

000010bc <strncpy>:
    10bc:	fb 01       	movw	r30, r22
    10be:	dc 01       	movw	r26, r24
    10c0:	41 50       	subi	r20, 0x01	; 1
    10c2:	50 40       	sbci	r21, 0x00	; 0
    10c4:	48 f0       	brcs	.+18     	; 0x10d8 <strncpy+0x1c>
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	00 20       	and	r0, r0
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <strncpy+0x4>
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <strncpy+0x16>
    10d0:	1d 92       	st	X+, r1
    10d2:	41 50       	subi	r20, 0x01	; 1
    10d4:	50 40       	sbci	r21, 0x00	; 0
    10d6:	e0 f7       	brcc	.-8      	; 0x10d0 <strncpy+0x14>
    10d8:	08 95       	ret

000010da <strstr>:
    10da:	fb 01       	movw	r30, r22
    10dc:	51 91       	ld	r21, Z+
    10de:	55 23       	and	r21, r21
    10e0:	a9 f0       	breq	.+42     	; 0x110c <strstr+0x32>
    10e2:	bf 01       	movw	r22, r30
    10e4:	dc 01       	movw	r26, r24
    10e6:	4d 91       	ld	r20, X+
    10e8:	45 17       	cp	r20, r21
    10ea:	41 11       	cpse	r20, r1
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <strstr+0xc>
    10ee:	59 f4       	brne	.+22     	; 0x1106 <strstr+0x2c>
    10f0:	cd 01       	movw	r24, r26
    10f2:	01 90       	ld	r0, Z+
    10f4:	00 20       	and	r0, r0
    10f6:	49 f0       	breq	.+18     	; 0x110a <strstr+0x30>
    10f8:	4d 91       	ld	r20, X+
    10fa:	40 15       	cp	r20, r0
    10fc:	41 11       	cpse	r20, r1
    10fe:	c9 f3       	breq	.-14     	; 0x10f2 <strstr+0x18>
    1100:	fb 01       	movw	r30, r22
    1102:	41 11       	cpse	r20, r1
    1104:	ef cf       	rjmp	.-34     	; 0x10e4 <strstr+0xa>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	08 95       	ret

0000110e <itoa>:
    110e:	fb 01       	movw	r30, r22
    1110:	9f 01       	movw	r18, r30
    1112:	e8 94       	clt
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	c4 f0       	brlt	.+48     	; 0x1148 <itoa+0x3a>
    1118:	45 32       	cpi	r20, 0x25	; 37
    111a:	b4 f4       	brge	.+44     	; 0x1148 <itoa+0x3a>
    111c:	4a 30       	cpi	r20, 0x0A	; 10
    111e:	29 f4       	brne	.+10     	; 0x112a <itoa+0x1c>
    1120:	97 fb       	bst	r25, 7
    1122:	1e f4       	brtc	.+6      	; 0x112a <itoa+0x1c>
    1124:	90 95       	com	r25
    1126:	81 95       	neg	r24
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	64 2f       	mov	r22, r20
    112c:	77 27       	eor	r23, r23
    112e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__udivmodhi4>
    1132:	80 5d       	subi	r24, 0xD0	; 208
    1134:	8a 33       	cpi	r24, 0x3A	; 58
    1136:	0c f0       	brlt	.+2      	; 0x113a <itoa+0x2c>
    1138:	89 5d       	subi	r24, 0xD9	; 217
    113a:	81 93       	st	Z+, r24
    113c:	cb 01       	movw	r24, r22
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	a1 f7       	brne	.-24     	; 0x112a <itoa+0x1c>
    1142:	16 f4       	brtc	.+4      	; 0x1148 <itoa+0x3a>
    1144:	5d e2       	ldi	r21, 0x2D	; 45
    1146:	51 93       	st	Z+, r21
    1148:	10 82       	st	Z, r1
    114a:	c9 01       	movw	r24, r18
    114c:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <strrev>

00001150 <ltoa>:
    1150:	fa 01       	movw	r30, r20
    1152:	cf 93       	push	r28
    1154:	ff 93       	push	r31
    1156:	ef 93       	push	r30
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	44 f1       	brlt	.+80     	; 0x11ac <ltoa+0x5c>
    115c:	25 32       	cpi	r18, 0x25	; 37
    115e:	34 f5       	brge	.+76     	; 0x11ac <ltoa+0x5c>
    1160:	c2 2f       	mov	r28, r18
    1162:	e8 94       	clt
    1164:	ca 30       	cpi	r28, 0x0A	; 10
    1166:	49 f4       	brne	.+18     	; 0x117a <ltoa+0x2a>
    1168:	97 fb       	bst	r25, 7
    116a:	3e f4       	brtc	.+14     	; 0x117a <ltoa+0x2a>
    116c:	90 95       	com	r25
    116e:	80 95       	com	r24
    1170:	70 95       	com	r23
    1172:	61 95       	neg	r22
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	2c 2f       	mov	r18, r28
    117c:	33 27       	eor	r19, r19
    117e:	44 27       	eor	r20, r20
    1180:	55 27       	eor	r21, r21
    1182:	ff 93       	push	r31
    1184:	ef 93       	push	r30
    1186:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodsi4>
    118a:	ef 91       	pop	r30
    118c:	ff 91       	pop	r31
    118e:	60 5d       	subi	r22, 0xD0	; 208
    1190:	6a 33       	cpi	r22, 0x3A	; 58
    1192:	0c f0       	brlt	.+2      	; 0x1196 <ltoa+0x46>
    1194:	69 5d       	subi	r22, 0xD9	; 217
    1196:	61 93       	st	Z+, r22
    1198:	b9 01       	movw	r22, r18
    119a:	ca 01       	movw	r24, r20
    119c:	60 50       	subi	r22, 0x00	; 0
    119e:	70 40       	sbci	r23, 0x00	; 0
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	51 f7       	brne	.-44     	; 0x117a <ltoa+0x2a>
    11a6:	16 f4       	brtc	.+4      	; 0x11ac <ltoa+0x5c>
    11a8:	cd e2       	ldi	r28, 0x2D	; 45
    11aa:	c1 93       	st	Z+, r28
    11ac:	10 82       	st	Z, r1
    11ae:	8f 91       	pop	r24
    11b0:	9f 91       	pop	r25
    11b2:	cf 91       	pop	r28
    11b4:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <strrev>

000011b8 <__mulhi_const_10>:
    11b8:	7a e0       	ldi	r23, 0x0A	; 10
    11ba:	97 9f       	mul	r25, r23
    11bc:	90 2d       	mov	r25, r0
    11be:	87 9f       	mul	r24, r23
    11c0:	80 2d       	mov	r24, r0
    11c2:	91 0d       	add	r25, r1
    11c4:	11 24       	eor	r1, r1
    11c6:	08 95       	ret

000011c8 <strrev>:
    11c8:	dc 01       	movw	r26, r24
    11ca:	fc 01       	movw	r30, r24
    11cc:	67 2f       	mov	r22, r23
    11ce:	71 91       	ld	r23, Z+
    11d0:	77 23       	and	r23, r23
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <strrev+0x4>
    11d4:	32 97       	sbiw	r30, 0x02	; 2
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <strrev+0x18>
    11d8:	7c 91       	ld	r23, X
    11da:	6d 93       	st	X+, r22
    11dc:	70 83       	st	Z, r23
    11de:	62 91       	ld	r22, -Z
    11e0:	ae 17       	cp	r26, r30
    11e2:	bf 07       	cpc	r27, r31
    11e4:	c8 f3       	brcs	.-14     	; 0x11d8 <strrev+0x10>
    11e6:	08 95       	ret

000011e8 <__udivmodhi4>:
    11e8:	aa 1b       	sub	r26, r26
    11ea:	bb 1b       	sub	r27, r27
    11ec:	51 e1       	ldi	r21, 0x11	; 17
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <__udivmodhi4_ep>

000011f0 <__udivmodhi4_loop>:
    11f0:	aa 1f       	adc	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	a6 17       	cp	r26, r22
    11f6:	b7 07       	cpc	r27, r23
    11f8:	10 f0       	brcs	.+4      	; 0x11fe <__udivmodhi4_ep>
    11fa:	a6 1b       	sub	r26, r22
    11fc:	b7 0b       	sbc	r27, r23

000011fe <__udivmodhi4_ep>:
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	5a 95       	dec	r21
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__udivmodhi4_loop>
    1206:	80 95       	com	r24
    1208:	90 95       	com	r25
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	08 95       	ret

00001210 <_exit>:
    1210:	f8 94       	cli

00001212 <__stop_program>:
    1212:	ff cf       	rjmp	.-2      	; 0x1212 <__stop_program>
